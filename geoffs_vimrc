" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Load pathogen plugin installer
call pathogen#infect()

"TODO - why did I comment this out?
"if has('mouse')
 set mouse=a
"endif

" Useful mappings for managing tabs (Vim 7 specific mappings)
if version >= 700
  nnoremap <CS-Right> :tabnext<cr>
  nnoremap <CS-Left>  :tabprevious<cr>
  nnoremap <C-n>      :tabnew<cr>
  nnoremap <C-t>      :tabclose<cr>
" want to keep <CR> to move down on first non-whitespace line
"  nnoremap <C-m>      :tabmove<cr>
endif

" TODO - Can I use 'Command' key instead?
"<Ctrl-X> -- cut (goto visual mode and cut)
imap <C-X> <C-O>vgG
vmap <C-X> "*x<Esc>i

"<Ctrl-C> -- copy (goto visual mode and copy)
imap <C-C> <C-O>vgG
vmap <C-C> "*y<Esc>i

"<Ctrl-A> -- copy all
imap <C-A> <C-O>gg<C-O>gH<C-O>G<Esc>
vmap <C-A> <Esc>gggH<C-O>G<Esc>i

"<Ctrl-V> -- paste
nm \\paste\\ "=@*.'xy'<CR>gPFx"_2x:echo<CR>
imap <C-V> x<Esc>\\paste\\"_s
vmap <C-V> "-cx<Esc>\\paste\\"_x

" This stopped working for some reason, trying pangloss/vim-javascript
" JavaScript Folding
"au FileType javascript call JavaScriptFold()
"let javaScript_fold=1
" JsBeautify
" if issues with beautify, try `cd ~/.vim/bundle/vim-jsbeautify && git pull && git submodule update --init --recursive`
autocmd FileType javascript noremap <buffer>  <c-i> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-i> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-i> :call CSSBeautify()<cr>

"config for faster html indentation by Andy Wokula http://www.vim.org/scripts/script.php?script_id=2075
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" Set terminal colors to 256 for iTerm2
set t_Co=256
" Turn on line numbers
set number

" Don't load start screen
set shortmess=I
" Use .editorconfig instead
" makes >> insert 3 spaces of indent
"set shiftwidth=3
" makes tab insert 3 spaces of indent
"set softtabstop=3
" fixes tabs to written using tabstop of 3
"set tabstop=3
" expands tabs into spaces
"set expandtab
" allow backspace beyond current insert session
set backspace=2
" set jshint config file
let g:jshintconfig = "~/.vim/.jshintrc"

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " Autocomplete JavaScript
  autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
  " Autocomplete CSS
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  " Autocomplete HTML
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

  " Turn on SuperTab support for OmniComplete
  let g:SuperTabDefaultCompletionType = "context"

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
  
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Show hidden characters
set list

" Enable github enterprise for Fugitive Gbrowse
let g:fugitive_github_domains = ['https://github.webapps.rr.com']

" Have syntastic check on file load
let g:syntastic_check_on_open=1

set laststatus=2

" string to indicate name of the highlighting syntax item
" useful for customizing colorschemes
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction

set statusline=
" truncate the line at the start if it is too long
set statusline+=%<
" full path to the file in the buffer
set statusline+=%F
" literal space character ' ' 
set statusline+=\ 
" Help buffer flag, text is "[help]"
set statusline+=%h
" Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
set statusline+=%m
" Readonly flag, text is "[RO]"
set statusline+=%r
" Git/Fugitive Status line 
set statusline+=%{fugitive#statusline()}
" literal space character ' ' 
set statusline+=\ 
" JSHint/Syntastic Status line
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%{SyntaxItem()}
" Separation point between left and right aligned items.
set statusline+=%=
" linenumber,columnumber
" left justify item %-
" minwid, 14
" start of item group ( 
" Line number
" Column number
" Virtual column number %V, not displayed if equal to %c
" start of item group ( 
" end of item group ( 
set statusline+=%-14.(%l,%c%V%)
" literal space character ' ' 
set statusline+=\ 
"  Percentage through file of displayed window.
set statusline+=%P

"100% black background color
"something white
"
"colorscheme geoff
let g:solarized_termcolors=256
let g:solarized_diffmode="high"
set background=dark
colorscheme solarized

" Annoyances
" map keys for resize splits
" Paste is still not right
" -I want to use Command-c, Command-a, Command-c
"  -when pasting, I don't want indentation on, unless it works correctly
" Use intellij colorscheme
" Cursor is not obvious, need it to be a high contrast color
" NERDTree Toggle map
" http://stackoverflow.com/questions/10303557/map-f2-to-neerdtreetoggle

" Wishlist
" Reload chrome on file save
" tmux script to start environment
" Status line for [JSHint OK]
" Status line for Git modified
" Git modified on status line
" perlcritic and vim
" http://blogs.perl.org/users/ovid/2012/07/integrating-perlcritic-and-vim.html